import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QDialog, QLineEdit, QMessageBox
import threading

# Variable to keep track of whether the backend is currently running
backend_running = False

class SettingsDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Settings")
        self.setGeometry(100, 100, 300, 200)

        self.email_label = QLabel("Email:", self)
        self.email_edit = QLineEdit(self)

        self.password_label = QLabel("Password:", self)
        self.password_edit = QLineEdit(self)
        self.password_edit.setEchoMode(QLineEdit.Password)
        
        self.email_label = QLabel("Write Sender or the Subject of Emails Getting Extracted:", self)
        self.email_edit = QLineEdit(self)

        self.save_button = QPushButton("Save", self)
        self.save_button.clicked.connect(self.save_settings)

        layout = QVBoxLayout()
        layout.addWidget(self.email_label)
        layout.addWidget(self.email_edit)
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_edit)
        layout.addWidget(self.save_button)
        self.setLayout(layout)

    def save_settings(self):
        email = self.email_edit.text()
        password = self.password_edit.text()

        # Here you can save the settings to a file, database, or other storage mechanism
        # For simplicity, we'll just show a message box with the settings
        QMessageBox.information(self, "Settings Saved", f"Email: {email}\nPassword: {password}")

def run_backend():
    global backend_running  # Declare backend_running as global
    if backend_running:
        print("Backend is already running")
        return

    # Set backend_running to True to prevent multiple backend instances
    backend_running = True

    # Define the function to run in a separate thread
    def backend_task():
        try:
            # Your backend code here
            with open("gmailParsing.py", "r") as f:
                code = f.read()
            exec(code)
        finally:
            # Set backend_running to False when the backend task is finished
            backend_running = False

    # Create a new thread for the backend task
    backend_thread = threading.Thread(target=backend_task)
    backend_thread.start()

class AppWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Desktop App")
        self.setGeometry(100, 100, 400, 200)

        self.welcome_label = QLabel(self)
        self.welcome_label.setText("Welcome to Your App")
        self.welcome_label.move(50, 50)

        self.settings_button = QPushButton('Settings', self)
        self.settings_button.clicked.connect(self.show_settings)
        self.settings_button.move(50, 100)

        self.run_button = QPushButton('Run Backend', self)
        self.run_button.clicked.connect(run_backend)
        self.run_button.move(200, 100)

    def show_settings(self):
        settings_dialog = SettingsDialog()
        settings_dialog.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = AppWindow()
    window.show()
    sys.exit(app.exec_())
